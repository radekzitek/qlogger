"""
Django settings for itrm project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import sys
import json
import logging


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Ensure log directories exist and are writable
log_file = os.getenv('DJANGO_LOG_FILENAME', 'logs/django.log')
json_log_file = os.getenv('DJANGO_LOG_JSON_FILENAME', 'logs/django.json.log')

log_dir = os.path.dirname(log_file)
json_log_dir = os.path.dirname(json_log_file)

for directory in [log_dir, json_log_dir]:
    if not os.path.exists(directory):
        os.makedirs(directory)
    if not os.access(directory, os.W_OK):
        raise PermissionError(f"Directory {directory} is not writable")
    
class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            'level': record.levelname,
            'timestamp': self.formatTime(record, self.datefmt),
            'message': record.getMessage(),
            'module': record.module,
            'funcName': record.funcName,
            'lineno': record.lineno,
            'process': record.process,
            'thread': record.thread,
            'name': record.name,
        }
        if record.exc_info:
            log_record['exc_info'] = self.formatException(record.exc_info)
        return json.dumps(log_record)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': JsonFormatter,
            'datefmt': '%Y-%m-%dT%H:%M:%S%z',  # ISO 8601 format
        },
        'verbose': {
            'format': '{asctime} {levelname} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            # Default to ERROR
            'level': os.getenv('DJANGO_CONSOLE_LOG_LEVEL', 'ERROR'),
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simple',
        },
        'file': {
            # Default to INFO
            'level': os.getenv('DJANGO_FILE_LOG_LEVEL', 'INFO'),
            'class': 'logging.handlers.RotatingFileHandler',
            # Default filename
            'filename': os.getenv('DJANGO_LOG_FILENAME', 'logs/django.log'),
            # Default 5MB
            'maxBytes': int(os.getenv('DJANGO_LOG_MAX_BYTES', '5242880')),
            # Default 5
            'backupCount': int(os.getenv('DJANGO_LOG_BACKUP_COUNT', '5')),
            'formatter': 'verbose',
        },
        'jsonfile': {
            # Default to INFO
            'level': os.getenv('DJANGO_FILE_LOG_LEVEL', 'INFO'),
            'class': 'logging.handlers.RotatingFileHandler',
            # Default filename
            'filename': os.getenv('DJANGO_LOG_JSON_FILENAME', 'logs/django.json.log'),
            # Default 5MB
            'maxBytes': int(os.getenv('DJANGO_LOG_MAX_BYTES', '5242880')),
            # Default 5
            'backupCount': int(os.getenv('DJANGO_LOG_BACKUP_COUNT', '5')),
            'formatter': 'json',
        },

    },
    'loggers': {
        'django': {
            'handlers': ['console', 'jsonfile', 'file'],
            # Default to DEBUG
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'jsonfile', 'file'],
            # Default to DEBUG
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
    },
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [host for host in os.getenv(
    'ALLOWED_HOSTS', '').split(',') if host]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'org',
    'risk',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'itrm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'org.context_processors.all_companies',  # Add this line
            ],
        },
    },
]

WSGI_APPLICATION = 'itrm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE'),
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
